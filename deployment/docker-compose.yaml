version: "3.8"

services:
  app:
    build: ./app/
    image: ml-service-api:1.0
    container_name: ml-service-api
    restart: unless-stopped
    env_file:
      - ./app/.env.template
    volumes:
      - ./app:/app
      - ../ml_service:/app/ml_service
    networks:
      - ml-service-network
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8080/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    depends_on:
      - database
      - rabbitmq

  web-proxy:
    image: nginx:1.25.3
    container_name: ml-service-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      app:
        condition: service_healthy
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      # Раскомментируйте, если нужны SSL сертификаты
      # - ./nginx/ssl:/etc/nginx/ssl
    networks:
      - ml-service-network

  rabbitmq:
    image: rabbitmq:3.12-management
    container_name: ml-service-rabbitmq
    restart: unless-stopped
    ports:
      - "15672:15672"  # Порт для веб-интерфейса
      - "5672:5672"    # Порт для AMQP
    volumes:
      - rabbitmq_volume:/var/lib/rabbitmq
    networks:
      - ml-service-network
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest

  database:
    image: postgres:14.10
    container_name: ml-service-postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=ml_service
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    volumes:
      - postgres_volume:/var/lib/postgresql/data
    networks:
      - ml-service-network

networks:
  ml-service-network:
    name: ml-service-network
    driver: bridge

volumes:
  postgres_volume:
  rabbitmq_volume: 