from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler, CallbackQueryHandler
from telegram.request import HTTPXRequest
import httpx
import os
from dotenv import load_dotenv
import logging
from sqlalchemy.sql import func
from models import Session, User, Prediction, Notification, SystemStats, UserRole
from datetime import datetime, timedelta
import random
import json
from pathlib import Path
import sys
import asyncio

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
env_path = Path(__file__).parent.parent.parent / '.env'
logger.info(f"–ü—É—Ç—å –∫ .env —Ñ–∞–π–ª—É: {env_path}")
load_dotenv(env_path)

TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
ADMIN_USERNAME = os.getenv("ADMIN_USERNAME", "admin")
API_BASE_URL = os.getenv("API_BASE_URL", "http://localhost:8000")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
if not TELEGRAM_BOT_TOKEN:
    logger.error("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    raise ValueError("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

logger.info(f"–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –∑–∞–≥—Ä—É–∂–µ–Ω: {TELEGRAM_BOT_TOKEN[:5]}...")

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
REGISTER, LOGIN, DEPOSIT, PREDICT, ADMIN_MENU = range(5)

# –°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
PREDICTION_COST = 10.0

# HTTP –∫–ª–∏–µ–Ω—Ç –¥–ª—è API
async def get_http_client():
    """–°–æ–∑–¥–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç HTTP –∫–ª–∏–µ–Ω—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API"""
    return httpx.AsyncClient(
        timeout=30.0,
        base_url=API_BASE_URL
    )

async def api_predict(input_data: dict) -> dict:
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ API –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π"""
    try:
        async with httpx.AsyncClient(base_url=API_BASE_URL, timeout=30.0) as client:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É
            response = await client.post("/predictions/predict", json={"data": input_data})
            if response.status_code != 200:
                logger.error(f"–û—à–∏–±–∫–∞ API: {response.status_code} - {response.text}")
                return {"error": f"–û—à–∏–±–∫–∞ API: {response.status_code}"}
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–¥–∞—á–µ
            prediction_data = response.json()
            prediction_id = prediction_data.get("prediction_id")
            
            if not prediction_id:
                return {"error": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è"}
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–æ 10 —Ä–∞–∑
            for _ in range(10):
                # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ –ø—Ä–æ–≤–µ—Ä–∫–æ–π
                await asyncio.sleep(1)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
                status_response = await client.get(f"/predictions/status/{prediction_id}")
                if status_response.status_code != 200:
                    continue
                    
                status_data = status_response.json()
                # –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                if status_data.get("status") == "completed":
                    return status_data
            
            # –ï—Å–ª–∏ –ø–æ—Å–ª–µ 10 –ø–æ–ø—ã—Ç–æ–∫ –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —á—Ç–æ –¥–æ—Å—Ç—É–ø–Ω–æ
            return prediction_data
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ API: {e}")
        return {"error": f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {str(e)}"}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    session = Session()
    user = session.query(User).filter_by(telegram_id=update.effective_user.id).first()
    
    if user:
        user.last_activity = datetime.utcnow()
        session.commit()
        
        keyboard = [
            [InlineKeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å", callback_data='balance'),
             InlineKeyboardButton("üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data='deposit')],
            [InlineKeyboardButton("üîÆ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ", callback_data='predict'),
             InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='stats')],
            [InlineKeyboardButton("üìù –ò—Å—Ç–æ—Ä–∏—è", callback_data='history')]
        ]
        
        if user.role == UserRole.ADMIN:
            keyboard.append([InlineKeyboardButton("üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data='admin')])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {user.username}!\n"
            f"–í–∞—à –±–∞–ª–∞–Ω—Å: {user.balance} —Ä—É–±.\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup
        )
    else:
        keyboard = [
            [InlineKeyboardButton("üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", callback_data='register'),
             InlineKeyboardButton("üîë –í—Ö–æ–¥", callback_data='login')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π. –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã:",
            reply_markup=reply_markup
        )
    session.close()

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    if query.data == 'balance':
        await balance(update, context)
    elif query.data == 'deposit':
        await deposit(update, context)
    elif query.data == 'predict':
        await predict(update, context)
    elif query.data == 'history':
        await history(update, context)
    elif query.data == 'admin':
        await admin_menu(update, context)
    elif query.data == 'stats':
        await user_stats(update, context)
    elif query.data.startswith('deposit_'):
        await deposit_amount(update, context)
    elif query.data == 'admin_stats':
        await admin_stats(update, context)

async def register(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    session = Session()
    user = session.query(User).filter_by(telegram_id=update.effective_user.id).first()
    
    if user:
        await update.callback_query.message.reply_text("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
        session.close()
        return ConversationHandler.END
    
    await update.callback_query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
    session.close()
    return REGISTER

async def register_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    session = Session()
    username = update.message.text
    
    if session.query(User).filter_by(username=username).first():
        await update.message.reply_text("–≠—Ç–æ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –∑–∞–Ω—è—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ:")
        session.close()
        return REGISTER
    
    role = UserRole.ADMIN if username == ADMIN_USERNAME else UserRole.REGULAR
    
    new_user = User(
        telegram_id=update.effective_user.id,
        username=username,
        balance=0.0,
        role=role
    )
    session.add(new_user)
    session.commit()  # –°—Ä–∞–∑—É –∫–æ–º–º–∏—Ç–∏–º, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = session.query(SystemStats).first()
    if not stats:
        stats = SystemStats(total_users=1, total_predictions=0, total_revenue=0.0)
        session.add(stats)
    else:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ total_users –Ω–µ None –ø–µ—Ä–µ–¥ –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–æ–º
        if stats.total_users is None:
            stats.total_users = 1
        else:
            stats.total_users += 1
            
    stats.last_updated = datetime.utcnow()
    session.commit()
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    notification = Notification(
        user_id=new_user.id,
        message="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π!"
    )
    session.add(notification)
    session.commit()
    
    await update.message.reply_text(
        f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, {username}!\n"
        f"–í–∞—à –±–∞–ª–∞–Ω—Å: {new_user.balance} —Ä—É–±.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /predict –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è."
    )
    session.close()
    return ConversationHandler.END

async def login(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥–∞"""
    await update.callback_query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
    return LOGIN

async def login_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –ø—Ä–∏ –≤—Ö–æ–¥–µ"""
    session = Session()
    username = update.message.text
    user = session.query(User).filter_by(username=username).first()
    
    if not user:
        await update.message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        session.close()
        return LOGIN
    
    user.telegram_id = update.effective_user.id
    user.last_activity = datetime.utcnow()
    session.commit()
    
    await update.message.reply_text(
        f"–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ, {username}!\n"
        f"–í–∞—à –±–∞–ª–∞–Ω—Å: {user.balance} —Ä—É–±.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /predict –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è."
    )
    session.close()
    return ConversationHandler.END

async def balance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞"""
    session = Session()
    user = session.query(User).filter_by(telegram_id=update.effective_user.id).first()
    
    if not user:
        await update.callback_query.message.reply_text("–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register –∏–ª–∏ /login")
        session.close()
        return
    
    await update.callback_query.message.reply_text(f"–í–∞—à –±–∞–ª–∞–Ω—Å: {user.balance} —Ä—É–±.")
    session.close()

async def deposit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞"""
    session = Session()
    user = session.query(User).filter_by(telegram_id=update.effective_user.id).first()
    
    if not user:
        await update.callback_query.message.reply_text("–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register –∏–ª–∏ /login")
        session.close()
        return ConversationHandler.END
    
    keyboard = [
        [InlineKeyboardButton("50 —Ä—É–±.", callback_data='deposit_50'),
         InlineKeyboardButton("100 —Ä—É–±.", callback_data='deposit_100')],
        [InlineKeyboardButton("200 —Ä—É–±.", callback_data='deposit_200'),
         InlineKeyboardButton("500 —Ä—É–±.", callback_data='deposit_500')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.callback_query.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:",
        reply_markup=reply_markup
    )
    session.close()

async def deposit_amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å—É–º–º—ã –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è"""
    query = update.callback_query
    amount = float(query.data.split('_')[1])
    
    session = Session()
    user = session.query(User).filter_by(telegram_id=update.effective_user.id).first()
    user.balance += amount
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = session.query(SystemStats).first()
    if not stats:
        stats = SystemStats()
        session.add(stats)
    stats.total_revenue += amount
    stats.last_updated = datetime.utcnow()
    
    session.commit()
    
    # –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏
    notification = Notification(
        user_id=user.id,
        message=f"–í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount} —Ä—É–±."
    )
    session.add(notification)
    session.commit()
    
    await query.message.reply_text(
        f"–ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount} —Ä—É–±.\n"
        f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {user.balance} —Ä—É–±."
    )
    session.close()
    return ConversationHandler.END

async def predict(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è"""
    session = Session()
    user = session.query(User).filter_by(telegram_id=update.effective_user.id).first()
    
    if not user:
        await update.callback_query.message.reply_text("–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register –∏–ª–∏ /login")
        session.close()
        return ConversationHandler.END
    
    if user.balance < PREDICTION_COST:
        await update.callback_query.message.reply_text(
            f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ. –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: {PREDICTION_COST} —Ä—É–±.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /deposit –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞."
        )
        session.close()
        return ConversationHandler.END
    
    await update.callback_query.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ç–µ–∫—Å—Ç –∏–ª–∏ —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è):"
    )
    session.close()
    return PREDICT

async def make_prediction(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è"""
    session = Session()
    user = session.query(User).filter_by(telegram_id=update.effective_user.id).first()
    
    if not user:
        await update.message.reply_text("–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register –∏–ª–∏ /login")
        session.close()
        return ConversationHandler.END
    
    if user.balance < PREDICTION_COST:
        await update.message.reply_text(
            f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ. –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: {PREDICTION_COST} —Ä—É–±.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /deposit –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞."
        )
        session.close()
        return ConversationHandler.END
        
    input_text = update.message.text
    
    # –ü—ã—Ç–∞–µ–º—Å—è —Å–¥–µ–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å –∫ API
    try:
        # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
        input_data = {"text": input_text}
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ API –∏ —Å–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        status_message = await update.message.reply_text("üîÑ –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –≤ –æ—á–µ—Ä–µ–¥—å –æ–±—Ä–∞–±–æ—Ç–∫–∏...")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ API (—Ç–µ–ø–µ—Ä—å —ç—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç –∑–∞–¥–∞—á—É –≤ RabbitMQ)
        api_result = await api_predict(input_data)
        
        if "error" in api_result:
            # –ï—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
            logger.warning(f"–û—à–∏–±–∫–∞ API, –∏—Å–ø–æ–ª—å–∑—É—é –ª–æ–∫–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ: {api_result}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await status_message.edit_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ API, –∏—Å–ø–æ–ª—å–∑—É—é –ª–æ–∫–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ...")
            
            predictions = [
                ("–î–∞, —ç—Ç–æ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è", 0.85),
                ("–ù–µ—Ç, —ç—Ç–æ–≥–æ –Ω–µ —Å–ª—É—á–∏—Ç—Å—è", 0.75),
                ("–í–æ–∑–º–æ–∂–Ω–æ, –Ω–æ –Ω–µ —Ñ–∞–∫—Ç", 0.65),
                ("–°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, –¥–∞", 0.80),
                ("–°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, –Ω–µ—Ç", 0.70),
                ("–ù—É–∂–Ω–æ –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏", 0.50)
            ]
            prediction_text, confidence = random.choice(predictions)
            result = {"prediction": prediction_text, "confidence": confidence}
            worker_id = "local"
        else:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç API
            logger.info(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç API: {api_result}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ª–∏ –∑–∞–¥–∞—á–∞
            if api_result.get("status") == "completed":
                await status_message.edit_text("‚úÖ –ó–∞–¥–∞—á–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞! –ü–æ–ª—É—á–∞—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç...")
            else:
                await status_message.edit_text("‚è≥ –ó–∞–¥–∞—á–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ, –Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if "result" in api_result and isinstance(api_result["result"], dict):
                result_data = api_result["result"].get("result", {})
                if isinstance(result_data, dict):
                    prediction_text = str(result_data.get("prediction", "–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ"))
                    confidence = float(result_data.get("confidence", 0.5))
                    worker_id = result_data.get("worker_id", "unknown")
                else:
                    prediction_text = "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"
                    confidence = 0.5
                    worker_id = "unknown"
            else:
                prediction_text = "–û–∂–∏–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"
                confidence = 0.5
                worker_id = "pending"
                
            result = {"prediction": prediction_text, "confidence": confidence}
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: {e}")
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
        predictions = [
            ("–î–∞, —ç—Ç–æ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è", 0.85),
            ("–ù–µ—Ç, —ç—Ç–æ–≥–æ –Ω–µ —Å–ª—É—á–∏—Ç—Å—è", 0.75),
            ("–í–æ–∑–º–æ–∂–Ω–æ, –Ω–æ –Ω–µ —Ñ–∞–∫—Ç", 0.65)
        ]
        prediction_text, confidence = random.choice(predictions)
        result = {"prediction": prediction_text, "confidence": confidence}
        worker_id = "error"
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ
    prediction = Prediction(
        user_id=user.id,
        input_data=input_text,
        result=json.dumps(result),  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–µ—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–∞–∫ JSON —Å—Ç—Ä–æ–∫—É
        cost=PREDICTION_COST
    )
    session.add(prediction)
    
    # –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞
    user.balance -= PREDICTION_COST
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = session.query(SystemStats).first()
    if not stats:
        stats = SystemStats()
        session.add(stats)
    
    if stats.total_predictions is None:
        stats.total_predictions = 1
    else:
        stats.total_predictions += 1
    
    stats.last_updated = datetime.utcnow()
    
    session.commit()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await update.message.reply_text(
        f"üîÆ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ: {result['prediction']}\n"
        f"üìä –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result['confidence']*100:.1f}%\n"
        f"ü§ñ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤–æ—Ä–∫–µ—Ä–æ–º: {worker_id}\n"
        f"üí∞ –° –≤–∞—à–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ —Å–ø–∏—Å–∞–Ω–æ {PREDICTION_COST} —Ä—É–±.\n"
        f"üí≥ –û—Å—Ç–∞—Ç–æ–∫ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ: {user.balance} —Ä—É–±."
    )
    session.close()
    return ConversationHandler.END

async def history(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π"""
    session = Session()
    user = session.query(User).filter_by(telegram_id=update.effective_user.id).first()
    
    if not user:
        await update.callback_query.message.reply_text("–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register –∏–ª–∏ /login")
        session.close()
        return
    
    predictions = session.query(Prediction).filter_by(user_id=user.id).order_by(Prediction.created_at.desc()).limit(5).all()
    
    if not predictions:
        await update.callback_query.message.reply_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π.")
        session.close()
        return
    
    message = "üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π:\n\n"
    for pred in predictions:
        # –ü–∞—Ä—Å–∏–º JSON –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        try:
            result_data = json.loads(pred.result)
            prediction_text = result_data.get("prediction", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            confidence = result_data.get("confidence", 0.5)
        except (json.JSONDecodeError, TypeError):
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            prediction_text = pred.result
            confidence = 0.5
            
        message += (
            f"üìÖ {pred.created_at.strftime('%d.%m.%Y %H:%M')}\n"
            f"üìÑ –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {pred.input_data}\n"
            f"üîÆ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ: {prediction_text}\n"
            f"üìä –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence*100:.1f}%\n"
            f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {pred.cost} —Ä—É–±.\n\n"
        )
    
    await update.callback_query.message.reply_text(message)
    session.close()

async def user_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    session = Session()
    user = session.query(User).filter_by(telegram_id=update.effective_user.id).first()
    
    if not user:
        await update.callback_query.message.reply_text("–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register –∏–ª–∏ /login")
        session.close()
        return
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º session.execute –≤–º–µ—Å—Ç–æ query –¥–ª—è –±–æ–ª–µ–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ SQL
    total_predictions_result = session.execute(
        "SELECT COUNT(*) FROM predictions WHERE user_id = :user_id",
        {"user_id": user.id}
    )
    total_predictions = total_predictions_result.scalar() or 0
    
    total_spent_result = session.execute(
        "SELECT COALESCE(SUM(cost), 0) FROM predictions WHERE user_id = :user_id",
        {"user_id": user.id}
    )
    total_spent = total_spent_result.scalar() or 0.0
    
    await update.callback_query.message.reply_text(
        f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
        f"üë§ –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.username}\n"
        f"üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {user.balance} —Ä—É–±.\n"
        f"üîÆ –í—Å–µ–≥–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π: {total_predictions}\n"
        f"üí∏ –í—Å–µ–≥–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ: {total_spent} —Ä—É–±.\n"
        f"üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user.created_at.strftime('%d.%m.%Y')}"
    )
    session.close()

async def admin_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    session = Session()
    user = session.query(User).filter_by(telegram_id=update.effective_user.id).first()
    
    if not user or user.role != UserRole.ADMIN:
        await update.callback_query.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        session.close()
        return
    
    keyboard = [
        [InlineKeyboardButton("üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='admin_stats')],
        [InlineKeyboardButton("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", callback_data='admin_users')],
        [InlineKeyboardButton("üîî –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ", callback_data='admin_notify')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.callback_query.message.reply_text(
        "üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )
    session.close()
    return ADMIN_MENU

async def admin_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã"""
    session = Session()
    stats = session.query(SystemStats).first()
    
    if not stats:
        stats = SystemStats()
        session.add(stats)
        session.commit()
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ SQL –∑–∞–ø—Ä–æ—Å—ã —á–µ—Ä–µ–∑ session.execute
    total_users_result = session.execute("SELECT COUNT(*) FROM users")
    total_users = total_users_result.scalar() or 0
    
    active_users_result = session.execute("SELECT COUNT(*) FROM users WHERE is_active = true")
    active_users = active_users_result.scalar() or 0
    
    total_predictions_result = session.execute("SELECT COUNT(*) FROM predictions")
    total_predictions = total_predictions_result.scalar() or 0
    
    await update.callback_query.message.reply_text(
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã:\n\n"
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
        f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {active_users}\n"
        f"üîÆ –í—Å–µ–≥–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π: {total_predictions}\n"
        f"üí∞ –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: {stats.total_revenue} —Ä—É–±.\n"
        f"üîÑ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {stats.last_updated.strftime('%d.%m.%Y %H:%M')}"
    )
    session.close()

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    try:
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ HTTP –∫–ª–∏–µ–Ω—Ç–∞ —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º–∏ —Ç–∞–π–º–∞—É—Ç–∞–º–∏
        request = HTTPXRequest(
            connection_pool_size=8,
            read_timeout=60,
            write_timeout=60,
            connect_timeout=60,
            pool_timeout=60
        )
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–æ–º
        application = Application.builder().token(TELEGRAM_BOT_TOKEN).request(request).build()
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        application.add_handler(CommandHandler("start", start))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π - ConversationHandler
        conv_handler = ConversationHandler(
            entry_points=[
                CommandHandler("start", start), 
                CallbackQueryHandler(register, pattern='^register$'),
                CallbackQueryHandler(login, pattern='^login$'),
                CallbackQueryHandler(deposit, pattern='^deposit$'),
                CallbackQueryHandler(predict, pattern='^predict$'),
                CallbackQueryHandler(admin_menu, pattern='^admin$')
            ],
            states={
                REGISTER: [MessageHandler(filters.TEXT & ~filters.COMMAND, register_name)],
                LOGIN: [MessageHandler(filters.TEXT & ~filters.COMMAND, login_name)],
                DEPOSIT: [CallbackQueryHandler(deposit_amount, pattern='^deposit_')],
                PREDICT: [MessageHandler(filters.TEXT & ~filters.COMMAND, make_prediction)],
                ADMIN_MENU: [
                    CallbackQueryHandler(admin_stats, pattern='^admin_stats$'),
                    # –î—Ä—É–≥–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
                ] 
            },
            fallbacks=[CommandHandler("start", start), CallbackQueryHandler(start, pattern='^start$')]
        )
        
        application.add_handler(conv_handler)

        # –û—Ç–¥–µ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫, –Ω–µ –≤—Ö–æ–¥—è—â–∏—Ö –≤ ConversationHandler
        application.add_handler(CallbackQueryHandler(button_handler)) 

        logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        application.run_polling(allowed_updates=Update.ALL_TYPES)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        raise

if __name__ == '__main__':
    main() 